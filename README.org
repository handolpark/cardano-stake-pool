#+title: Cardano Stake Pool

* TODO pre-built binary locally

** Preparation

#+begin_src shell :tangle .envrc
  use flake
#+end_src

#+name: flake.nix
#+begin_src nix :tangle flake.nix
  {
    description = "Cardano Stake Pool";

    inputs = {
      nixpkgs.url = "nixpkgs";
    };

    outputs = inputs@{ flake-parts, ... }:
      flake-parts.lib.mkFlake { inherit inputs; } {
        imports = [
          # To import a flake module
          # 1. Add foo to inputs
          # 2. Add foo as a parameter to the outputs function
          # 3. Add here: foo.flakeModule

        ];
        systems = [ "x86_64-linux" "aarch64-darwin" ];
        perSystem = { config, self', inputs', pkgs, system, ... }: {
          # Per-system attributes can be defined here. The self' and inputs'
          # module parameters provide easy access to attributes of the same
          # system.

          # Equivalent to  inputs'.nixpkgs.legacyPackages.hello;
          packages = {
            # wget = (fetchTarball https://developers.cardano.org/docs/get-started/installing-cardano-node/#macos);
            default = pkgs.hello;
          };

          devShells = {
            default = pkgs.mkShell {
              nativeBuildInputs = [
                pkgs.wget
              ];};
          };
        };
        flake = {
          # The usual flake attributes can be defined here, including system-
          # agnostic ones like nixosModule and system-enumerating ones, although
          # those are more easily expressed in perSystem.

        };
      };
  }
#+end_src


** Installing ~cardano-node~

#+begin_src shell
  curl -LO https://developers.cardano.org/docs/get-started/installing-cardano-node/#macos
#+end_src

#+RESULTS:


* TODO pre-built binary in a docker container 



* TODO binary built from the source in a docker container
